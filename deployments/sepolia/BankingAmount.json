{
  "address": "0x095B26705eB8Fe87c01e1BC01CBF8593620CDA75",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Blocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotProvdingLoan",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "YouHavePayedLoan",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BankTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BankTotalMoney",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "RequestedLoanValue",
          "type": "uint256"
        }
      ],
      "name": "LOAN",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PayLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ViewAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blockedPeople",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockedpeople",
      "outputs": [
        {
          "internalType": "address",
          "name": "blockedAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loanAmountMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loanMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "people",
      "outputs": [
        {
          "internalType": "address",
          "name": "CustmerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "peopleLoan",
      "outputs": [
        {
          "internalType": "address",
          "name": "CustmerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestampLoan",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "loanStatus",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "blockStatus",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to_receiever",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "send_from_BankAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum BankingAmount.loan",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "up",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withDraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa5de5298f064395c51b72633b58cf6e38d55f37b49cf2393d401bc38a08e5eb",
  "receipt": {
    "to": null,
    "from": "0x0a0179860323B23d990E71f7ee006238D8720179",
    "contractAddress": "0x095B26705eB8Fe87c01e1BC01CBF8593620CDA75",
    "transactionIndex": 49,
    "gasUsed": "1800335",
    "logsBloom": "0x
    "blockHash": "0x1dc4a01f63b884822a6e01a199bc4e4210f359cdcf7f3157de52989fcb3caa7c",
    "transactionHash": "0xaa5de5298f064395c51b72633b58cf6e38d55f37b49cf2393d401bc38a08e5eb",
    "logs": [],
    "blockNumber": 4623001,
    "cumulativeGasUsed": "16854248",
    "status": 1,
    "byzantium": true
  },
  "args": [
    600
  ],
  "numDeployments": 5,
  "solcInputHash": "e4ab480268a7319edab84243e0cb0839",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Blocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProvdingLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YouHavePayedLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BankTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BankTotalMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"RequestedLoanValue\",\"type\":\"uint256\"}],\"name\":\"LOAN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PayLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ViewAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockedPeople\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockedpeople\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"blockedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanAmountMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"people\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"CustmerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"peopleLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"CustmerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLoan\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"loanStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blockStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to_receiever\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"send_from_BankAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum BankingAmount.loan\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"up\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BankingTranscation.sol\":\"BankingAmount\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"contracts/BankingTranscation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSED\\npragma solidity ^0.8.7;\\n\\n/* This contract is about sending your ETH to the BANK(contract) and retieve when you need or \\n   you can send to someone\\n   function:\\n   payment\\n   withdraw\\n   send_to\\n   View_deposited amount\\n   loan:\\n*/\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\n\\n\\n\\nerror NoBalance();\\nerror InsufficientBalance();\\nerror  NotProvdingLoan();\\nerror  YouHavePayedLoan();\\nerror Blocked();\\n\\ncontract BankingAmount is AutomationCompatibleInterface {\\n    address private immutable i_OwnerAddress;\\n    uint256 public BankTotalMoney;\\n    address public contractOwner;\\n    uint256 public immutable i_interval;\\n    uint256 public lastTimeStamp;\\n    uint256 public loanIndex;\\n    uint256 public i=0;\\n    uint256 public loanCount=0;\\n    uint256 public currentTime=0;\\n    bool public up;\\n    \\n    struct Custmers {\\n        address CustmerAddress;\\n        uint256 amount;\\n    }\\n    \\n    struct peopleLoanDetails{\\n        address CustmerAddress;\\n        uint256 loanAmount;\\n        uint256 timestampLoan;\\n        bool loanStatus;\\n        bool blockStatus;  //true==blocked false ==not blocked\\n    }\\n    struct BlockedListPeople {\\n        address blockedAddress;\\n        uint256 remainingAmount;\\n    }\\n\\n    enum loan {ON,OFF}\\n    \\n    loan public status;\\n    \\n    constructor(uint256 interval) {\\n        contractOwner = msg.sender;\\n        i_interval=interval;\\n        status=loan.OFF;\\n        i_OwnerAddress=msg.sender;\\n    }\\n\\n    Custmers[] public people;\\n    peopleLoanDetails[] public peopleLoan;\\n    BlockedListPeople[] public blockedpeople;\\n\\n    mapping(address => uint256) public Balance;\\n    mapping(address => bool) public loanMapping;\\n    mapping(address => uint256) public loanAmountMapping;\\n    mapping(address => uint256) public blockedPeople;\\n\\n\\n    function payment() public payable {\\n        // payable(address(this)).send(amount);\\n        people.push(\\n            Custmers(msg.sender, msg.value)\\n        );\\n        Balance[msg.sender] =\\n            Balance[msg.sender] +\\n            msg.value;\\n        BankTotalMoney = BankTotalMoney + Balance[msg.sender];\\n    }\\n\\n\\n    function send_from_BankAccount(address payable to_receiever,uint256 value) public {\\n        address from_user = msg.sender;\\n        // (bool sent, ) = payable(to_receiever).call{\\n        //     value: msg.value\\n        // }(\\\"\\\");\\n        // require(sent, \\\"Failed to send Ether\\\");\\n        to_receiever.transfer(value);\\n        // Balance[to_receiever] = Balance[to_receiever] + Balance[from_user];\\n        Balance[from_user] = Balance[from_user] - value;\\n    }\\n\\n    function withDraw(uint256 value) public {\\n        address withdraw = msg.sender;\\n        if (Balance[withdraw] == 0) revert NoBalance();\\n        if(blockedPeople[msg.sender]!=0) revert Blocked();\\n        // (bool sent, ) = payable(withdraw).call{value: msg.value}(\\\"\\\");\\n        // require(sent, \\\"Failed to withdraw Ether\\\");\\n        payable(withdraw).transfer(value);\\n        Balance[withdraw] = Balance[withdraw] - value;\\n    }\\n\\n    function LOAN(uint256 RequestedLoanValue) public {\\n        // if (BankTotalMoney > RequestedLoanValue.getConversionRate(PriceFeed))\\n        //     revert InsufficientBalance();\\n        // if(address(this).balance<)\\n        if(blockedPeople[msg.sender]!=0) revert Blocked();\\n        address withdraw = msg.sender;\\n        payable(withdraw).transfer(RequestedLoanValue);\\n        loanCount=loanCount+1;//\\n        BankTotalMoney = BankTotalMoney - RequestedLoanValue;\\n        lastTimeStamp=block.timestamp;\\n        peopleLoan.push(peopleLoanDetails(msg.sender,RequestedLoanValue,lastTimeStamp,false,false));\\n        loanMapping[msg.sender]=false;\\n        loanAmountMapping[msg.sender]=RequestedLoanValue;\\n        status=loan.ON;\\n        checkUpkeep(\\\"\\\");\\n    }\\n\\n    function PayLoan() public payable{\\n        if(loanMapping[msg.sender]!=false) revert YouHavePayedLoan();  \\n        payable(i_OwnerAddress).transfer(loanAmountMapping[msg.sender]);\\n        loanAmountMapping[msg.sender]=0;\\n        loanMapping[msg.sender]=true;\\n        peopleLoan[peopleLoan.length-1].loanStatus=true;\\n        BankTotalMoney = BankTotalMoney + loanAmountMapping[msg.sender];\\n        }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    ) public override returns (bool upkeepNeeded, bytes memory /*performData*/) {\\n        // loanCount=loanCount+1; \\n        if(status == loan.OFF) revert NotProvdingLoan();\\n        // for(uint256 i=0;i<=peopleLoan.length-1;i++)\\n            loanIndex=i;\\n            currentTime=block.timestamp;\\n            if(peopleLoan[i].blockStatus==true || peopleLoan[i].loanStatus ==true){\\n                i++;\\n                loanIndex++;\\n            }\\n            upkeepNeeded = (\\n                ((block.timestamp - peopleLoan[i].timestampLoan) > i_interval)\\n                && !peopleLoan[i].loanStatus \\n                && !peopleLoan[i].blockStatus\\n            );\\n            up=upkeepNeeded;\\n            return (upkeepNeeded, \\\"0x0\\\");\\n        \\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        //  (((block.timestamp - lastTimeStamp) > i_interval) && !peopleLoan[peopleLoan.length-1].loanStatus);\\n        blockedpeople.push(BlockedListPeople(\\n            peopleLoan[loanIndex].CustmerAddress,\\n            peopleLoan[loanIndex].loanAmount)\\n        );\\n        peopleLoan[loanIndex].blockStatus=true;\\n        blockedPeople[peopleLoan[loanIndex].CustmerAddress]=peopleLoan[loanIndex].loanAmount;\\n    }\\n\\n    function ViewAmount() public view returns(uint256) {\\n        return Balance[msg.sender];\\n    }\\n    function BankTotalAmount() public view returns(uint256){\\n        return address(this).balance;\\n    }\\n\\n    function loanAmount() public view returns(uint256) {\\n        return loanAmountMapping[msg.sender];\\n    }\\n}\",\"keccak256\":\"0xb19e871e671a19a0b7369256b62d8e58cfefb145400bb66182e52d87e01666ae\",\"license\":\"MIT LICENSED\"}},\"version\":1}",
  "bytecode": "0x60c06040526000600455600060055560006006553480156200002057600080fd5b506040516200207438038062002074833981810160405281019062000046919062000112565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060a081815250506001600760016101000a81548160ff02191690836001811115620000b857620000b76200014e565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506200019c565b6000815190506200010c8162000182565b92915050565b6000602082840312156200012b576200012a6200017d565b5b60006200013b84828501620000fb565b91505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b6200018d8162000144565b81146200019957600080fd5b50565b60805160601c60a051611ea8620001cc6000396000818161107601526111d801526000610e890152611ea86000f3fe60806040526004361061019c5760003560e01c80636919207d116100ec578063ce606ee01161008a578063d1e659af11610064578063d1e659af146105cd578063d478dfdb146105f8578063d5a49e0114610621578063e5aa3d581461064c5761019c565b8063ce606ee01461054c578063ce63094d14610577578063d18e81b3146105a25761019c565b80637a8cfcb4116100c65780637a8cfcb41461047b5780639d585f7f146104a65780639e7a13ad146104d1578063b8a84c521461050f5761019c565b80636919207d146103e75780636be98763146104125780636e04ff0d1461043d5761019c565b80633f3b3b27116101595780634be19f9f116101335780634be19f9f146103385780634d535a80146103755780635a815fc3146103b2578063686b38d5146103bc5761019c565b80633f3b3b27146102da57806342f6487a146103055780634585e33b1461030f5761019c565b806301388b66146101a157806308a4c1fa146101df57806314174f331461022057806315b3090614610249578063200d2ed214610272578063239fcf0f1461029d575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c3919061193d565b610677565b6040516101d69291906119fa565b60405180910390f35b3480156101eb57600080fd5b506102066004803603810190610201919061193d565b6106cb565b604051610217959493929190611a23565b60405180910390f35b34801561022c57600080fd5b506102476004803603810190610242919061193d565b61074b565b005b34801561025557600080fd5b50610270600480360381019061026b9190611867565b61091c565b005b34801561027e57600080fd5b506102876109fb565b6040516102949190611ac1565b60405180910390f35b3480156102a957600080fd5b506102c460048036038101906102bf919061183a565b610a0e565b6040516102d19190611adc565b60405180910390f35b3480156102e657600080fd5b506102ef610a26565b6040516102fc9190611adc565b60405180910390f35b61030d610a2c565b005b34801561031b57600080fd5b50610336600480360381019061033191906118a7565b610bb8565b005b34801561034457600080fd5b5061035f600480360381019061035a919061183a565b610dc5565b60405161036c9190611adc565b60405180910390f35b34801561038157600080fd5b5061039c6004803603810190610397919061183a565b610ddd565b6040516103a99190611a76565b60405180910390f35b6103ba610dfd565b005b3480156103c857600080fd5b506103d161106e565b6040516103de9190611adc565b60405180910390f35b3480156103f357600080fd5b506103fc611074565b6040516104099190611adc565b60405180910390f35b34801561041e57600080fd5b50610427611098565b6040516104349190611adc565b60405180910390f35b34801561044957600080fd5b50610464600480360381019061045f91906118f4565b6110a0565b604051610472929190611a91565b60405180910390f35b34801561048757600080fd5b50610490611303565b60405161049d9190611adc565b60405180910390f35b3480156104b257600080fd5b506104bb611309565b6040516104c89190611adc565b60405180910390f35b3480156104dd57600080fd5b506104f860048036038101906104f3919061193d565b611350565b6040516105069291906119fa565b60405180910390f35b34801561051b57600080fd5b506105366004803603810190610531919061183a565b6113a4565b6040516105439190611adc565b60405180910390f35b34801561055857600080fd5b506105616113bc565b60405161056e91906119df565b60405180910390f35b34801561058357600080fd5b5061058c6113e2565b6040516105999190611adc565b60405180910390f35b3480156105ae57600080fd5b506105b76113e8565b6040516105c49190611adc565b60405180910390f35b3480156105d957600080fd5b506105e26113ee565b6040516105ef9190611adc565b60405180910390f35b34801561060457600080fd5b5061061f600480360381019061061a919061193d565b611435565b005b34801561062d57600080fd5b5061063661171c565b6040516106439190611a76565b60405180910390f35b34801561065857600080fd5b5061066161172f565b60405161066e9190611adc565b60405180910390f35b600a818154811061068757600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600981815481106106db57600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900460ff16908060030160019054906101000a900460ff16905085565b60003390506000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156107ca576040517fc2caa2a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610843576040517fa5baf15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610889573d6000803e3d6000fd5b5081600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108d59190611bbf565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60003390508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610967573d6000803e3d6000fd5b5081600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109b39190611bbf565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600760019054906101000a900460ff1681565b600b6020528060005260406000206000915090505481565b60025481565b600860405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200134815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505034600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b209190611b69565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600054610bb09190611b69565b600081905550565b600a6040518060400160405280600960035481548110610bdb57610bda611d8c565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600960035481548110610c3e57610c3d611d8c565b5b906000526020600020906004020160010154815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550506001600960035481548110610ce757610ce6611d8c565b5b906000526020600020906004020160030160016101000a81548160ff021916908315150217905550600960035481548110610d2557610d24611d8c565b5b906000526020600020906004020160010154600e6000600960035481548110610d5157610d50611d8c565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600e6020528060005260406000206000915090505481565b600c6020528060005260406000206000915054906101000a900460ff1681565b60001515600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610e87576040517f833346fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610f2c573d6000803e3d6000fd5b506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160096001600980549050610fe09190611bbf565b81548110610ff157610ff0611d8c565b5b906000526020600020906004020160030160006101000a81548160ff021916908315150217905550600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000546110669190611b69565b600081905550565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600047905090565b600060606001808111156110b7576110b6611d5d565b5b600760019054906101000a900460ff1660018111156110d9576110d8611d5d565b5b1415611111576040517f745c5ddd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600454600381905550426006819055506001151560096004548154811061113b5761113a611d8c565b5b906000526020600020906004020160030160019054906101000a900460ff16151514806111a057506001151560096004548154811061117d5761117c611d8c565b5b906000526020600020906004020160030160009054906101000a900460ff161515145b156111d657600460008154809291906111b890611ce5565b9190505550600360008154809291906111d090611ce5565b91905055505b7f000000000000000000000000000000000000000000000000000000000000000060096004548154811061120d5761120c611d8c565b5b9060005260206000209060040201600201544261122a9190611bbf565b118015611269575060096004548154811061124857611247611d8c565b5b906000526020600020906004020160030160009054906101000a900460ff16155b80156112a7575060096004548154811061128657611285611d8c565b5b906000526020600020906004020160030160019054906101000a900460ff16155b915081600760006101000a81548160ff021916908315150217905550816040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525091509150915091565b60035481565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6008818154811061136057600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600d6020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60065481565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146114ae576040517fa5baf15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156114f9573d6000803e3d6000fd5b5060016005546115099190611b69565b6005819055508160005461151d9190611bbf565b6000819055504260028190555060096040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600254815260200160001515815260200160001515815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690831515021790555050506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760016101000a81548160ff021916908360018111156116f9576116f8611d5d565b5b0217905550611716604051806020016040528060008152506110a0565b50505050565b600760009054906101000a900460ff1681565b60045481565b600061174861174384611b1c565b611af7565b90508281526020810184848401111561176457611763611df9565b5b61176f848285611c72565b509392505050565b60008135905061178681611e2d565b92915050565b60008135905061179b81611e44565b92915050565b60008083601f8401126117b7576117b6611def565b5b8235905067ffffffffffffffff8111156117d4576117d3611dea565b5b6020830191508360018202830111156117f0576117ef611df4565b5b9250929050565b600082601f83011261180c5761180b611def565b5b813561181c848260208601611735565b91505092915050565b60008135905061183481611e5b565b92915050565b6000602082840312156118505761184f611e03565b5b600061185e84828501611777565b91505092915050565b6000806040838503121561187e5761187d611e03565b5b600061188c8582860161178c565b925050602061189d85828601611825565b9150509250929050565b600080602083850312156118be576118bd611e03565b5b600083013567ffffffffffffffff8111156118dc576118db611dfe565b5b6118e8858286016117a1565b92509250509250929050565b60006020828403121561190a57611909611e03565b5b600082013567ffffffffffffffff81111561192857611927611dfe565b5b611934848285016117f7565b91505092915050565b60006020828403121561195357611952611e03565b5b600061196184828501611825565b91505092915050565b61197381611bf3565b82525050565b61198281611c17565b82525050565b600061199382611b4d565b61199d8185611b58565b93506119ad818560208601611c81565b6119b681611e08565b840191505092915050565b6119ca81611c60565b82525050565b6119d981611c56565b82525050565b60006020820190506119f4600083018461196a565b92915050565b6000604082019050611a0f600083018561196a565b611a1c60208301846119d0565b9392505050565b600060a082019050611a38600083018861196a565b611a4560208301876119d0565b611a5260408301866119d0565b611a5f6060830185611979565b611a6c6080830184611979565b9695505050505050565b6000602082019050611a8b6000830184611979565b92915050565b6000604082019050611aa66000830185611979565b8181036020830152611ab88184611988565b90509392505050565b6000602082019050611ad660008301846119c1565b92915050565b6000602082019050611af160008301846119d0565b92915050565b6000611b01611b12565b9050611b0d8282611cb4565b919050565b6000604051905090565b600067ffffffffffffffff821115611b3757611b36611dbb565b5b611b4082611e08565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000611b7482611c56565b9150611b7f83611c56565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bb457611bb3611d2e565b5b828201905092915050565b6000611bca82611c56565b9150611bd583611c56565b925082821015611be857611be7611d2e565b5b828203905092915050565b6000611bfe82611c36565b9050919050565b6000611c1082611c36565b9050919050565b60008115159050919050565b6000819050611c3182611e19565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611c6b82611c23565b9050919050565b82818337600083830152505050565b60005b83811015611c9f578082015181840152602081019050611c84565b83811115611cae576000848401525b50505050565b611cbd82611e08565b810181811067ffffffffffffffff82111715611cdc57611cdb611dbb565b5b80604052505050565b6000611cf082611c56565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d2357611d22611d2e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60028110611e2a57611e29611d5d565b5b50565b611e3681611bf3565b8114611e4157600080fd5b50565b611e4d81611c05565b8114611e5857600080fd5b50565b611e6481611c56565b8114611e6f57600080fd5b5056fea26469706673582212207fadaa965f4ebca42f4b1e930ad63d12b4ee988e4137d155fac09c9cecc8a30a64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80636919207d116100ec578063ce606ee01161008a578063d1e659af11610064578063d1e659af146105cd578063d478dfdb146105f8578063d5a49e0114610621578063e5aa3d581461064c5761019c565b8063ce606ee01461054c578063ce63094d14610577578063d18e81b3146105a25761019c565b80637a8cfcb4116100c65780637a8cfcb41461047b5780639d585f7f146104a65780639e7a13ad146104d1578063b8a84c521461050f5761019c565b80636919207d146103e75780636be98763146104125780636e04ff0d1461043d5761019c565b80633f3b3b27116101595780634be19f9f116101335780634be19f9f146103385780634d535a80146103755780635a815fc3146103b2578063686b38d5146103bc5761019c565b80633f3b3b27146102da57806342f6487a146103055780634585e33b1461030f5761019c565b806301388b66146101a157806308a4c1fa146101df57806314174f331461022057806315b3090614610249578063200d2ed214610272578063239fcf0f1461029d575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c3919061193d565b610677565b6040516101d69291906119fa565b60405180910390f35b3480156101eb57600080fd5b506102066004803603810190610201919061193d565b6106cb565b604051610217959493929190611a23565b60405180910390f35b34801561022c57600080fd5b506102476004803603810190610242919061193d565b61074b565b005b34801561025557600080fd5b50610270600480360381019061026b9190611867565b61091c565b005b34801561027e57600080fd5b506102876109fb565b6040516102949190611ac1565b60405180910390f35b3480156102a957600080fd5b506102c460048036038101906102bf919061183a565b610a0e565b6040516102d19190611adc565b60405180910390f35b3480156102e657600080fd5b506102ef610a26565b6040516102fc9190611adc565b60405180910390f35b61030d610a2c565b005b34801561031b57600080fd5b50610336600480360381019061033191906118a7565b610bb8565b005b34801561034457600080fd5b5061035f600480360381019061035a919061183a565b610dc5565b60405161036c9190611adc565b60405180910390f35b34801561038157600080fd5b5061039c6004803603810190610397919061183a565b610ddd565b6040516103a99190611a76565b60405180910390f35b6103ba610dfd565b005b3480156103c857600080fd5b506103d161106e565b6040516103de9190611adc565b60405180910390f35b3480156103f357600080fd5b506103fc611074565b6040516104099190611adc565b60405180910390f35b34801561041e57600080fd5b50610427611098565b6040516104349190611adc565b60405180910390f35b34801561044957600080fd5b50610464600480360381019061045f91906118f4565b6110a0565b604051610472929190611a91565b60405180910390f35b34801561048757600080fd5b50610490611303565b60405161049d9190611adc565b60405180910390f35b3480156104b257600080fd5b506104bb611309565b6040516104c89190611adc565b60405180910390f35b3480156104dd57600080fd5b506104f860048036038101906104f3919061193d565b611350565b6040516105069291906119fa565b60405180910390f35b34801561051b57600080fd5b506105366004803603810190610531919061183a565b6113a4565b6040516105439190611adc565b60405180910390f35b34801561055857600080fd5b506105616113bc565b60405161056e91906119df565b60405180910390f35b34801561058357600080fd5b5061058c6113e2565b6040516105999190611adc565b60405180910390f35b3480156105ae57600080fd5b506105b76113e8565b6040516105c49190611adc565b60405180910390f35b3480156105d957600080fd5b506105e26113ee565b6040516105ef9190611adc565b60405180910390f35b34801561060457600080fd5b5061061f600480360381019061061a919061193d565b611435565b005b34801561062d57600080fd5b5061063661171c565b6040516106439190611a76565b60405180910390f35b34801561065857600080fd5b5061066161172f565b60405161066e9190611adc565b60405180910390f35b600a818154811061068757600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600981815481106106db57600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900460ff16908060030160019054906101000a900460ff16905085565b60003390506000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156107ca576040517fc2caa2a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610843576040517fa5baf15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610889573d6000803e3d6000fd5b5081600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108d59190611bbf565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60003390508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610967573d6000803e3d6000fd5b5081600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109b39190611bbf565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600760019054906101000a900460ff1681565b600b6020528060005260406000206000915090505481565b60025481565b600860405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200134815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505034600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b209190611b69565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600054610bb09190611b69565b600081905550565b600a6040518060400160405280600960035481548110610bdb57610bda611d8c565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600960035481548110610c3e57610c3d611d8c565b5b906000526020600020906004020160010154815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550506001600960035481548110610ce757610ce6611d8c565b5b906000526020600020906004020160030160016101000a81548160ff021916908315150217905550600960035481548110610d2557610d24611d8c565b5b906000526020600020906004020160010154600e6000600960035481548110610d5157610d50611d8c565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600e6020528060005260406000206000915090505481565b600c6020528060005260406000206000915054906101000a900460ff1681565b60001515600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610e87576040517f833346fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610f2c573d6000803e3d6000fd5b506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160096001600980549050610fe09190611bbf565b81548110610ff157610ff0611d8c565b5b906000526020600020906004020160030160006101000a81548160ff021916908315150217905550600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000546110669190611b69565b600081905550565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600047905090565b600060606001808111156110b7576110b6611d5d565b5b600760019054906101000a900460ff1660018111156110d9576110d8611d5d565b5b1415611111576040517f745c5ddd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600454600381905550426006819055506001151560096004548154811061113b5761113a611d8c565b5b906000526020600020906004020160030160019054906101000a900460ff16151514806111a057506001151560096004548154811061117d5761117c611d8c565b5b906000526020600020906004020160030160009054906101000a900460ff161515145b156111d657600460008154809291906111b890611ce5565b9190505550600360008154809291906111d090611ce5565b91905055505b7f000000000000000000000000000000000000000000000000000000000000000060096004548154811061120d5761120c611d8c565b5b9060005260206000209060040201600201544261122a9190611bbf565b118015611269575060096004548154811061124857611247611d8c565b5b906000526020600020906004020160030160009054906101000a900460ff16155b80156112a7575060096004548154811061128657611285611d8c565b5b906000526020600020906004020160030160019054906101000a900460ff16155b915081600760006101000a81548160ff021916908315150217905550816040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525091509150915091565b60035481565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6008818154811061136057600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600d6020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60065481565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146114ae576040517fa5baf15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156114f9573d6000803e3d6000fd5b5060016005546115099190611b69565b6005819055508160005461151d9190611bbf565b6000819055504260028190555060096040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600254815260200160001515815260200160001515815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690831515021790555050506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760016101000a81548160ff021916908360018111156116f9576116f8611d5d565b5b0217905550611716604051806020016040528060008152506110a0565b50505050565b600760009054906101000a900460ff1681565b60045481565b600061174861174384611b1c565b611af7565b90508281526020810184848401111561176457611763611df9565b5b61176f848285611c72565b509392505050565b60008135905061178681611e2d565b92915050565b60008135905061179b81611e44565b92915050565b60008083601f8401126117b7576117b6611def565b5b8235905067ffffffffffffffff8111156117d4576117d3611dea565b5b6020830191508360018202830111156117f0576117ef611df4565b5b9250929050565b600082601f83011261180c5761180b611def565b5b813561181c848260208601611735565b91505092915050565b60008135905061183481611e5b565b92915050565b6000602082840312156118505761184f611e03565b5b600061185e84828501611777565b91505092915050565b6000806040838503121561187e5761187d611e03565b5b600061188c8582860161178c565b925050602061189d85828601611825565b9150509250929050565b600080602083850312156118be576118bd611e03565b5b600083013567ffffffffffffffff8111156118dc576118db611dfe565b5b6118e8858286016117a1565b92509250509250929050565b60006020828403121561190a57611909611e03565b5b600082013567ffffffffffffffff81111561192857611927611dfe565b5b611934848285016117f7565b91505092915050565b60006020828403121561195357611952611e03565b5b600061196184828501611825565b91505092915050565b61197381611bf3565b82525050565b61198281611c17565b82525050565b600061199382611b4d565b61199d8185611b58565b93506119ad818560208601611c81565b6119b681611e08565b840191505092915050565b6119ca81611c60565b82525050565b6119d981611c56565b82525050565b60006020820190506119f4600083018461196a565b92915050565b6000604082019050611a0f600083018561196a565b611a1c60208301846119d0565b9392505050565b600060a082019050611a38600083018861196a565b611a4560208301876119d0565b611a5260408301866119d0565b611a5f6060830185611979565b611a6c6080830184611979565b9695505050505050565b6000602082019050611a8b6000830184611979565b92915050565b6000604082019050611aa66000830185611979565b8181036020830152611ab88184611988565b90509392505050565b6000602082019050611ad660008301846119c1565b92915050565b6000602082019050611af160008301846119d0565b92915050565b6000611b01611b12565b9050611b0d8282611cb4565b919050565b6000604051905090565b600067ffffffffffffffff821115611b3757611b36611dbb565b5b611b4082611e08565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000611b7482611c56565b9150611b7f83611c56565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bb457611bb3611d2e565b5b828201905092915050565b6000611bca82611c56565b9150611bd583611c56565b925082821015611be857611be7611d2e565b5b828203905092915050565b6000611bfe82611c36565b9050919050565b6000611c1082611c36565b9050919050565b60008115159050919050565b6000819050611c3182611e19565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611c6b82611c23565b9050919050565b82818337600083830152505050565b60005b83811015611c9f578082015181840152602081019050611c84565b83811115611cae576000848401525b50505050565b611cbd82611e08565b810181811067ffffffffffffffff82111715611cdc57611cdb611dbb565b5b80604052505050565b6000611cf082611c56565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d2357611d22611d2e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60028110611e2a57611e29611d5d565b5b50565b611e3681611bf3565b8114611e4157600080fd5b50565b611e4d81611c05565b8114611e5857600080fd5b50565b611e6481611c56565b8114611e6f57600080fd5b5056fea26469706673582212207fadaa965f4ebca42f4b1e930ad63d12b4ee988e4137d155fac09c9cecc8a30a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 76,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "BankTotalMoney",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 78,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "contractOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 82,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 84,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "loanIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 87,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "i",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 90,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "loanCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 93,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "currentTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 95,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "up",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 122,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "status",
        "offset": 1,
        "slot": "7",
        "type": "t_enum(loan)119"
      },
      {
        "astId": 151,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "people",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Custmers)100_storage)dyn_storage"
      },
      {
        "astId": 155,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "peopleLoan",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(peopleLoanDetails)111_storage)dyn_storage"
      },
      {
        "astId": 159,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "blockedpeople",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(BlockedListPeople)116_storage)dyn_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "Balance",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 167,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "loanMapping",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 171,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "loanAmountMapping",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 175,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "blockedPeople",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(BlockedListPeople)116_storage)dyn_storage": {
        "base": "t_struct(BlockedListPeople)116_storage",
        "encoding": "dynamic_array",
        "label": "struct BankingAmount.BlockedListPeople[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Custmers)100_storage)dyn_storage": {
        "base": "t_struct(Custmers)100_storage",
        "encoding": "dynamic_array",
        "label": "struct BankingAmount.Custmers[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(peopleLoanDetails)111_storage)dyn_storage": {
        "base": "t_struct(peopleLoanDetails)111_storage",
        "encoding": "dynamic_array",
        "label": "struct BankingAmount.peopleLoanDetails[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(loan)119": {
        "encoding": "inplace",
        "label": "enum BankingAmount.loan",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BlockedListPeople)116_storage": {
        "encoding": "inplace",
        "label": "struct BankingAmount.BlockedListPeople",
        "members": [
          {
            "astId": 113,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "blockedAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 115,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "remainingAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Custmers)100_storage": {
        "encoding": "inplace",
        "label": "struct BankingAmount.Custmers",
        "members": [
          {
            "astId": 97,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "CustmerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 99,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(peopleLoanDetails)111_storage": {
        "encoding": "inplace",
        "label": "struct BankingAmount.peopleLoanDetails",
        "members": [
          {
            "astId": 102,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "CustmerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 104,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "loanAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 106,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "timestampLoan",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 108,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "loanStatus",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 110,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "blockStatus",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}