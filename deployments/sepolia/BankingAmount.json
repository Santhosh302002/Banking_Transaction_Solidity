{
  "address": "0x081935cc584bEED8014aDd54fb3Df9a3f5Dc90C8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "PriceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Blocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotProvdingLoan",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "YouHavePayedLoan",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BankTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BankTotalMoney",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "RequestedLoanValue",
          "type": "uint256"
        }
      ],
      "name": "LOAN",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PayLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ViewAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blockedPeople",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockedpeople",
      "outputs": [
        {
          "internalType": "address",
          "name": "blockedAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loanAmountMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loanMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "people",
      "outputs": [
        {
          "internalType": "address",
          "name": "CustmerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "peopleLoan",
      "outputs": [
        {
          "internalType": "address",
          "name": "CustmerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestampLoan",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "loanStatus",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "blockStatus",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to_receiever",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "send_from_BankAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum BankingAmount.loan",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "up",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withDraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d17a0232e1a6b09621baaff793d5fb169f33a2342d321d85872855e6a355d42",
  "receipt": {
    "to": null,
    "from": "0x0a0179860323B23d990E71f7ee006238D8720179",
    "contractAddress": "0x081935cc584bEED8014aDd54fb3Df9a3f5Dc90C8",
    "transactionIndex": 54,
    "gasUsed": "2008350",
    "logsBloom": "0x
    "blockHash": "0xed95f37c7b921b15500eb4696ead778fae3debbcb12ed607d26a0d432916a0b2",
    "transactionHash": "0x0d17a0232e1a6b09621baaff793d5fb169f33a2342d321d85872855e6a355d42",
    "logs": [],
    "blockNumber": 4607338,
    "cumulativeGasUsed": "16273378",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306",
    600
  ],
  "numDeployments": 3,
  "solcInputHash": "a7b0cba156a56cbc24d67d3bbc7a3319",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"PriceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Blocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProvdingLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YouHavePayedLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BankTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BankTotalMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"RequestedLoanValue\",\"type\":\"uint256\"}],\"name\":\"LOAN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PayLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ViewAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockedPeople\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockedpeople\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"blockedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanAmountMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"people\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"CustmerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"peopleLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"CustmerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLoan\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"loanStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blockStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to_receiever\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"send_from_BankAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum BankingAmount.loan\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"up\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BankingTranscation.sol\":\"BankingAmount\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"contracts/BankingTranscation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSED\\npragma solidity ^0.8.7;\\n\\n/* This contract is about sending your ETH to the BANK(contract) and retieve when you need or \\n   you can send to someone\\n   function:\\n   payment\\n   withdraw\\n   send_to\\n   View_deposited amount\\n   loan:\\n*/\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n\\nerror NoBalance();\\nerror InsufficientBalance();\\nerror  NotProvdingLoan();\\nerror  YouHavePayedLoan();\\nerror Blocked();\\n\\ncontract BankingAmount is AutomationCompatibleInterface {\\n    using PriceConverter for uint256;\\n    address private immutable i_OwnerAddress;\\n    uint256 public BankTotalMoney;\\n    address public contractOwner;\\n    uint256 public immutable i_interval;\\n    uint256 public lastTimeStamp;\\n    uint256 public loanIndex;\\n    uint256 public i=0;\\n    uint256 public loanCount=0;\\n    uint256 public currentTime=0;\\n    bool public up;\\n    \\n    struct Custmers {\\n        address CustmerAddress;\\n        uint256 amount;\\n    }\\n    \\n    struct peopleLoanDetails{\\n        address CustmerAddress;\\n        uint256 loanAmount;\\n        uint256 timestampLoan;\\n        bool loanStatus;\\n        bool blockStatus;  //true==blocked false ==not blocked\\n    }\\n    struct BlockedListPeople {\\n        address blockedAddress;\\n        uint256 remainingAmount;\\n    }\\n    enum loan {ON,OFF}\\n    \\n    loan public status;\\n    AggregatorV3Interface public PriceFeed;\\n    \\n    constructor(address PriceFeedAddress,uint256 interval) {\\n        contractOwner = msg.sender;\\n        PriceFeed = AggregatorV3Interface(PriceFeedAddress);\\n        i_interval=interval;\\n        status=loan.OFF;\\n        i_OwnerAddress=msg.sender;\\n    }\\n\\n    Custmers[] public people;\\n    peopleLoanDetails[] public peopleLoan;\\n    BlockedListPeople[] public blockedpeople;\\n\\n    mapping(address => uint256) public Balance;\\n    mapping(address => bool) public loanMapping;\\n    mapping(address => uint256) public loanAmountMapping;\\n    mapping(address => uint256) public blockedPeople;\\n\\n\\n    function payment() public payable {\\n        people.push(\\n            Custmers(msg.sender, msg.value.getConversionRate(PriceFeed))\\n        );\\n        Balance[msg.sender] =\\n            Balance[msg.sender] +\\n            msg.value.getConversionRate(PriceFeed);\\n        BankTotalMoney = Balance[msg.sender];\\n    }\\n\\n    function ViewAmount() public view returns (uint256) {\\n        return Balance[msg.sender];\\n    }\\n    function BankTotalAmount() public view returns(uint256){\\n        return address(this).balance;\\n    }\\n\\n    function send_from_BankAccount(address payable to_receiever,uint256 value) public {\\n        address from_user = msg.sender;\\n        // (bool sent, ) = payable(to_receiever).call{\\n        //     value: msg.value\\n        // }(\\\"\\\");\\n        // require(sent, \\\"Failed to send Ether\\\");\\n        to_receiever.transfer(value);\\n        // Balance[to_receiever] = Balance[to_receiever] + Balance[from_user];\\n        Balance[from_user] = Balance[from_user] - value;\\n    }\\n\\n    function withDraw(uint256 value) public {\\n        address withdraw = msg.sender;\\n        if (Balance[withdraw] == 0) revert NoBalance();\\n        if(blockedPeople[msg.sender]!=0) revert Blocked();\\n        // (bool sent, ) = payable(withdraw).call{value: msg.value}(\\\"\\\");\\n        // require(sent, \\\"Failed to withdraw Ether\\\");\\n        payable(withdraw).transfer(value);\\n        Balance[withdraw] = Balance[withdraw] - value;\\n    }\\n\\n    function LOAN(uint256 RequestedLoanValue) public {\\n        // if (BankTotalMoney > RequestedLoanValue.getConversionRate(PriceFeed))\\n        //     revert InsufficientBalance();\\n        // if(address(this).balance<)\\n        if(blockedPeople[msg.sender]!=0) revert Blocked();\\n        address withdraw = msg.sender;\\n        payable(withdraw).transfer(RequestedLoanValue);\\n        loanCount=loanCount+1;//\\n        BankTotalMoney = BankTotalMoney - RequestedLoanValue;\\n        lastTimeStamp=block.timestamp;\\n        peopleLoan.push(peopleLoanDetails(msg.sender,RequestedLoanValue,lastTimeStamp,false,false));\\n        loanMapping[msg.sender]=false;\\n        loanAmountMapping[msg.sender]=RequestedLoanValue;\\n        status=loan.ON;\\n        checkUpkeep(\\\"\\\");\\n    }\\n\\n    function PayLoan() public payable{\\n        if(loanMapping[msg.sender]!=false) revert YouHavePayedLoan();  \\n        payable(i_OwnerAddress).transfer(loanAmountMapping[msg.sender]);\\n        loanMapping[msg.sender]=true;\\n        peopleLoan[peopleLoan.length-1].loanStatus=true;\\n        }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    ) public override returns (bool upkeepNeeded, bytes memory /*performData*/) {\\n        // loanCount=loanCount+1; \\n        if(status == loan.OFF) revert NotProvdingLoan();\\n        // for(uint256 i=0;i<=peopleLoan.length-1;i++)\\n            loanIndex=i;\\n            currentTime=block.timestamp;\\n            if(peopleLoan[i].blockStatus==true || peopleLoan[i].loanStatus ==true){\\n                i++;\\n                loanIndex++;\\n            }\\n            upkeepNeeded = (\\n                ((block.timestamp - peopleLoan[i].timestampLoan) > i_interval)\\n                && !peopleLoan[i].loanStatus \\n                && !peopleLoan[i].blockStatus\\n            );\\n            up=upkeepNeeded;\\n            return (upkeepNeeded, \\\"0x0\\\");\\n        \\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        //  (((block.timestamp - lastTimeStamp) > i_interval) && !peopleLoan[peopleLoan.length-1].loanStatus);\\n        blockedpeople.push(BlockedListPeople(\\n            peopleLoan[loanIndex].CustmerAddress,\\n            peopleLoan[loanIndex].loanAmount)\\n        );\\n        peopleLoan[loanIndex].blockStatus=true;\\n        blockedPeople[peopleLoan[loanIndex].CustmerAddress]=peopleLoan[loanIndex].loanAmount;\\n    }\\n}\",\"keccak256\":\"0xe06cf5e946db07d185ff4f070b0bc9a5a15c8b58e80371743be3c0b992d0bc9e\",\"license\":\"MIT LICENSED\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter{\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x8b13649c3fd330e89deb7448dd8f169a528dbcd0cba13c9e0ae4df2ab8a1cbf4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526000600455600060055560006006553480156200002057600080fd5b50604051620024e7380380620024e783398181016040528101906200004691906200016b565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600760026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060a081815250506001600760016101000a81548160ff02191690836001811115620000f957620000f8620001f0565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505062000258565b6000815190506200014e8162000224565b92915050565b60008151905062000165816200023e565b92915050565b600080604083850312156200018557620001846200021f565b5b600062000195858286016200013d565b9250506020620001a88582860162000154565b9150509250929050565b6000620001bf82620001c6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b6200022f81620001b2565b81146200023b57600080fd5b50565b6200024981620001e6565b81146200025557600080fd5b50565b60805160601c60a05161225f620002886000396000818161105f01526111c101526000610f0a015261225f6000f3fe60806040526004361061019c5760003560e01c8063686b38d5116100ec578063ce606ee01161008a578063d1e659af11610064578063d1e659af146105cd578063d478dfdb146105f8578063d5a49e0114610621578063e5aa3d581461064c5761019c565b8063ce606ee01461054c578063ce63094d14610577578063d18e81b3146105a25761019c565b80636e04ff0d116100c65780636e04ff0d146104685780637a8cfcb4146104a65780639e7a13ad146104d1578063b8a84c521461050f5761019c565b8063686b38d5146103e75780636919207d146104125780636be987631461043d5761019c565b8063239fcf0f116101595780634585e33b116101335780634585e33b1461033a5780634be19f9f146103635780634d535a80146103a05780635a815fc3146103dd5761019c565b8063239fcf0f146102c85780633f3b3b271461030557806342f6487a146103305761019c565b806301388b66146101a157806308a4c1fa146101df57806308b7fa311461022057806314174f331461024b57806315b3090614610274578063200d2ed21461029d575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c391906119fa565b610677565b6040516101d6929190611b41565b60405180910390f35b3480156101eb57600080fd5b50610206600480360381019061020191906119fa565b6106cb565b604051610217959493929190611b6a565b60405180910390f35b34801561022c57600080fd5b5061023561074b565b6040516102429190611c08565b60405180910390f35b34801561025757600080fd5b50610272600480360381019061026d91906119fa565b610771565b005b34801561028057600080fd5b5061029b60048036038101906102969190611924565b610942565b005b3480156102a957600080fd5b506102b2610a21565b6040516102bf9190611c23565b60405180910390f35b3480156102d457600080fd5b506102ef60048036038101906102ea91906118f7565b610a34565b6040516102fc9190611c3e565b60405180910390f35b34801561031157600080fd5b5061031a610a4c565b6040516103279190611c3e565b60405180910390f35b610338610a52565b005b34801561034657600080fd5b50610361600480360381019061035c9190611964565b610c39565b005b34801561036f57600080fd5b5061038a600480360381019061038591906118f7565b610e46565b6040516103979190611c3e565b60405180910390f35b3480156103ac57600080fd5b506103c760048036038101906103c291906118f7565b610e5e565b6040516103d49190611bbd565b60405180910390f35b6103e5610e7e565b005b3480156103f357600080fd5b506103fc611057565b6040516104099190611c3e565b60405180910390f35b34801561041e57600080fd5b5061042761105d565b6040516104349190611c3e565b60405180910390f35b34801561044957600080fd5b50610452611081565b60405161045f9190611c3e565b60405180910390f35b34801561047457600080fd5b5061048f600480360381019061048a91906119b1565b611089565b60405161049d929190611bd8565b60405180910390f35b3480156104b257600080fd5b506104bb6112ec565b6040516104c89190611c3e565b60405180910390f35b3480156104dd57600080fd5b506104f860048036038101906104f391906119fa565b6112f2565b604051610506929190611b41565b60405180910390f35b34801561051b57600080fd5b50610536600480360381019061053191906118f7565b611346565b6040516105439190611c3e565b60405180910390f35b34801561055857600080fd5b5061056161135e565b60405161056e9190611b26565b60405180910390f35b34801561058357600080fd5b5061058c611384565b6040516105999190611c3e565b60405180910390f35b3480156105ae57600080fd5b506105b761138a565b6040516105c49190611c3e565b60405180910390f35b3480156105d957600080fd5b506105e2611390565b6040516105ef9190611c3e565b60405180910390f35b34801561060457600080fd5b5061061f600480360381019061061a91906119fa565b6113d7565b005b34801561062d57600080fd5b506106366116be565b6040516106439190611bbd565b60405180910390f35b34801561065857600080fd5b506106616116d1565b60405161066e9190611c3e565b60405180910390f35b600a818154811061068757600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600981815481106106db57600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900460ff16908060030160019054906101000a900460ff16905085565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003390506000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156107f0576040517fc2caa2a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610869576040517fa5baf15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156108af573d6000803e3d6000fd5b5081600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108fb9190611ec3565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60003390508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561098d573d6000803e3d6000fd5b5081600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109d99190611ec3565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600760019054906101000a900460ff1681565b600b6020528060005260406000206000915090505481565b60025481565b600860405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001610ab0600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346116d790919063ffffffff16565b815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050610b64600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346116d790919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bae9190611ccb565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600081905550565b600a6040518060400160405280600960035481548110610c5c57610c5b612115565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600960035481548110610cbf57610cbe612115565b5b906000526020600020906004020160010154815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550506001600960035481548110610d6857610d67612115565b5b906000526020600020906004020160030160016101000a81548160ff021916908315150217905550600960035481548110610da657610da5612115565b5b906000526020600020906004020160010154600e6000600960035481548110610dd257610dd1612115565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600e6020528060005260406000206000915090505481565b600c6020528060005260406000206000915054906101000a900460ff1681565b60001515600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610f08576040517f833346fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610fad573d6000803e3d6000fd5b506001600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016009600160098054905061101c9190611ec3565b8154811061102d5761102c612115565b5b906000526020600020906004020160030160006101000a81548160ff021916908315150217905550565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600047905090565b600060606001808111156110a05761109f6120e6565b5b600760019054906101000a900460ff1660018111156110c2576110c16120e6565b5b14156110fa576040517f745c5ddd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600454600381905550426006819055506001151560096004548154811061112457611123612115565b5b906000526020600020906004020160030160019054906101000a900460ff161515148061118957506001151560096004548154811061116657611165612115565b5b906000526020600020906004020160030160009054906101000a900460ff161515145b156111bf57600460008154809291906111a19061203f565b9190505550600360008154809291906111b99061203f565b91905055505b7f00000000000000000000000000000000000000000000000000000000000000006009600454815481106111f6576111f5612115565b5b906000526020600020906004020160020154426112139190611ec3565b118015611252575060096004548154811061123157611230612115565b5b906000526020600020906004020160030160009054906101000a900460ff16155b8015611290575060096004548154811061126f5761126e612115565b5b906000526020600020906004020160030160019054906101000a900460ff16155b915081600760006101000a81548160ff021916908315150217905550816040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525091509150915091565b60035481565b6008818154811061130257600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600d6020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60065481565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611450576040517fa5baf15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561149b573d6000803e3d6000fd5b5060016005546114ab9190611ccb565b600581905550816000546114bf9190611ec3565b6000819055504260028190555060096040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600254815260200160001515815260200160001515815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690831515021790555050506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760016101000a81548160ff0219169083600181111561169b5761169a6120e6565b5b02179055506116b860405180602001604052806000815250611089565b50505050565b600760009054906101000a900460ff1681565b60045481565b6000806116e383611713565b90506000670de0b6b3a764000085836116fc9190611e69565b6117069190611d21565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561175c57600080fd5b505afa158015611770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117949190611a27565b5050509150506402540be400816117ab9190611d52565b915050919050565b60006117c66117c184611c7e565b611c59565b9050828152602081018484840111156117e2576117e1612182565b5b6117ed848285611fcc565b509392505050565b600081359050611804816121b6565b92915050565b600081359050611819816121cd565b92915050565b60008083601f84011261183557611834612178565b5b8235905067ffffffffffffffff81111561185257611851612173565b5b60208301915083600182028301111561186e5761186d61217d565b5b9250929050565b600082601f83011261188a57611889612178565b5b813561189a8482602086016117b3565b91505092915050565b6000815190506118b2816121e4565b92915050565b6000813590506118c7816121fb565b92915050565b6000815190506118dc816121fb565b92915050565b6000815190506118f181612212565b92915050565b60006020828403121561190d5761190c61218c565b5b600061191b848285016117f5565b91505092915050565b6000806040838503121561193b5761193a61218c565b5b60006119498582860161180a565b925050602061195a858286016118b8565b9150509250929050565b6000806020838503121561197b5761197a61218c565b5b600083013567ffffffffffffffff81111561199957611998612187565b5b6119a58582860161181f565b92509250509250929050565b6000602082840312156119c7576119c661218c565b5b600082013567ffffffffffffffff8111156119e5576119e4612187565b5b6119f184828501611875565b91505092915050565b600060208284031215611a1057611a0f61218c565b5b6000611a1e848285016118b8565b91505092915050565b600080600080600060a08688031215611a4357611a4261218c565b5b6000611a51888289016118e2565b9550506020611a62888289016118a3565b9450506040611a73888289016118cd565b9350506060611a84888289016118cd565b9250506080611a95888289016118e2565b9150509295509295909350565b611aab81611ef7565b82525050565b611aba81611f1b565b82525050565b6000611acb82611caf565b611ad58185611cba565b9350611ae5818560208601611fdb565b611aee81612191565b840191505092915050565b611b0281611f84565b82525050565b611b1181611f96565b82525050565b611b2081611f64565b82525050565b6000602082019050611b3b6000830184611aa2565b92915050565b6000604082019050611b566000830185611aa2565b611b636020830184611b17565b9392505050565b600060a082019050611b7f6000830188611aa2565b611b8c6020830187611b17565b611b996040830186611b17565b611ba66060830185611ab1565b611bb36080830184611ab1565b9695505050505050565b6000602082019050611bd26000830184611ab1565b92915050565b6000604082019050611bed6000830185611ab1565b8181036020830152611bff8184611ac0565b90509392505050565b6000602082019050611c1d6000830184611af9565b92915050565b6000602082019050611c386000830184611b08565b92915050565b6000602082019050611c536000830184611b17565b92915050565b6000611c63611c74565b9050611c6f828261200e565b919050565b6000604051905090565b600067ffffffffffffffff821115611c9957611c98612144565b5b611ca282612191565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000611cd682611f64565b9150611ce183611f64565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d1657611d15612088565b5b828201905092915050565b6000611d2c82611f64565b9150611d3783611f64565b925082611d4757611d466120b7565b5b828204905092915050565b6000611d5d82611f3a565b9150611d6883611f3a565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615611da757611da6612088565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611de457611de3612088565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615611e2157611e20612088565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615611e5e57611e5d612088565b5b828202905092915050565b6000611e7482611f64565b9150611e7f83611f64565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611eb857611eb7612088565b5b828202905092915050565b6000611ece82611f64565b9150611ed983611f64565b925082821015611eec57611eeb612088565b5b828203905092915050565b6000611f0282611f44565b9050919050565b6000611f1482611f44565b9050919050565b60008115159050919050565b6000819050611f35826121a2565b919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000611f8f82611fa8565b9050919050565b6000611fa182611f27565b9050919050565b6000611fb382611fba565b9050919050565b6000611fc582611f44565b9050919050565b82818337600083830152505050565b60005b83811015611ff9578082015181840152602081019050611fde565b83811115612008576000848401525b50505050565b61201782612191565b810181811067ffffffffffffffff8211171561203657612035612144565b5b80604052505050565b600061204a82611f64565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561207d5761207c612088565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b600281106121b3576121b26120e6565b5b50565b6121bf81611ef7565b81146121ca57600080fd5b50565b6121d681611f09565b81146121e157600080fd5b50565b6121ed81611f3a565b81146121f857600080fd5b50565b61220481611f64565b811461220f57600080fd5b50565b61221b81611f6e565b811461222657600080fd5b5056fea2646970667358221220fb7a06a13d5f5f57e87bdc5f0d7cb7ebdf4e55e23ca8adbd45cbe15204330fee64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c8063686b38d5116100ec578063ce606ee01161008a578063d1e659af11610064578063d1e659af146105cd578063d478dfdb146105f8578063d5a49e0114610621578063e5aa3d581461064c5761019c565b8063ce606ee01461054c578063ce63094d14610577578063d18e81b3146105a25761019c565b80636e04ff0d116100c65780636e04ff0d146104685780637a8cfcb4146104a65780639e7a13ad146104d1578063b8a84c521461050f5761019c565b8063686b38d5146103e75780636919207d146104125780636be987631461043d5761019c565b8063239fcf0f116101595780634585e33b116101335780634585e33b1461033a5780634be19f9f146103635780634d535a80146103a05780635a815fc3146103dd5761019c565b8063239fcf0f146102c85780633f3b3b271461030557806342f6487a146103305761019c565b806301388b66146101a157806308a4c1fa146101df57806308b7fa311461022057806314174f331461024b57806315b3090614610274578063200d2ed21461029d575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c391906119fa565b610677565b6040516101d6929190611b41565b60405180910390f35b3480156101eb57600080fd5b50610206600480360381019061020191906119fa565b6106cb565b604051610217959493929190611b6a565b60405180910390f35b34801561022c57600080fd5b5061023561074b565b6040516102429190611c08565b60405180910390f35b34801561025757600080fd5b50610272600480360381019061026d91906119fa565b610771565b005b34801561028057600080fd5b5061029b60048036038101906102969190611924565b610942565b005b3480156102a957600080fd5b506102b2610a21565b6040516102bf9190611c23565b60405180910390f35b3480156102d457600080fd5b506102ef60048036038101906102ea91906118f7565b610a34565b6040516102fc9190611c3e565b60405180910390f35b34801561031157600080fd5b5061031a610a4c565b6040516103279190611c3e565b60405180910390f35b610338610a52565b005b34801561034657600080fd5b50610361600480360381019061035c9190611964565b610c39565b005b34801561036f57600080fd5b5061038a600480360381019061038591906118f7565b610e46565b6040516103979190611c3e565b60405180910390f35b3480156103ac57600080fd5b506103c760048036038101906103c291906118f7565b610e5e565b6040516103d49190611bbd565b60405180910390f35b6103e5610e7e565b005b3480156103f357600080fd5b506103fc611057565b6040516104099190611c3e565b60405180910390f35b34801561041e57600080fd5b5061042761105d565b6040516104349190611c3e565b60405180910390f35b34801561044957600080fd5b50610452611081565b60405161045f9190611c3e565b60405180910390f35b34801561047457600080fd5b5061048f600480360381019061048a91906119b1565b611089565b60405161049d929190611bd8565b60405180910390f35b3480156104b257600080fd5b506104bb6112ec565b6040516104c89190611c3e565b60405180910390f35b3480156104dd57600080fd5b506104f860048036038101906104f391906119fa565b6112f2565b604051610506929190611b41565b60405180910390f35b34801561051b57600080fd5b50610536600480360381019061053191906118f7565b611346565b6040516105439190611c3e565b60405180910390f35b34801561055857600080fd5b5061056161135e565b60405161056e9190611b26565b60405180910390f35b34801561058357600080fd5b5061058c611384565b6040516105999190611c3e565b60405180910390f35b3480156105ae57600080fd5b506105b761138a565b6040516105c49190611c3e565b60405180910390f35b3480156105d957600080fd5b506105e2611390565b6040516105ef9190611c3e565b60405180910390f35b34801561060457600080fd5b5061061f600480360381019061061a91906119fa565b6113d7565b005b34801561062d57600080fd5b506106366116be565b6040516106439190611bbd565b60405180910390f35b34801561065857600080fd5b506106616116d1565b60405161066e9190611c3e565b60405180910390f35b600a818154811061068757600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600981815481106106db57600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900460ff16908060030160019054906101000a900460ff16905085565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003390506000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156107f0576040517fc2caa2a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610869576040517fa5baf15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156108af573d6000803e3d6000fd5b5081600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108fb9190611ec3565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60003390508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561098d573d6000803e3d6000fd5b5081600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109d99190611ec3565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600760019054906101000a900460ff1681565b600b6020528060005260406000206000915090505481565b60025481565b600860405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001610ab0600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346116d790919063ffffffff16565b815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050610b64600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346116d790919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bae9190611ccb565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600081905550565b600a6040518060400160405280600960035481548110610c5c57610c5b612115565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600960035481548110610cbf57610cbe612115565b5b906000526020600020906004020160010154815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550506001600960035481548110610d6857610d67612115565b5b906000526020600020906004020160030160016101000a81548160ff021916908315150217905550600960035481548110610da657610da5612115565b5b906000526020600020906004020160010154600e6000600960035481548110610dd257610dd1612115565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600e6020528060005260406000206000915090505481565b600c6020528060005260406000206000915054906101000a900460ff1681565b60001515600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610f08576040517f833346fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610fad573d6000803e3d6000fd5b506001600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016009600160098054905061101c9190611ec3565b8154811061102d5761102c612115565b5b906000526020600020906004020160030160006101000a81548160ff021916908315150217905550565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600047905090565b600060606001808111156110a05761109f6120e6565b5b600760019054906101000a900460ff1660018111156110c2576110c16120e6565b5b14156110fa576040517f745c5ddd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600454600381905550426006819055506001151560096004548154811061112457611123612115565b5b906000526020600020906004020160030160019054906101000a900460ff161515148061118957506001151560096004548154811061116657611165612115565b5b906000526020600020906004020160030160009054906101000a900460ff161515145b156111bf57600460008154809291906111a19061203f565b9190505550600360008154809291906111b99061203f565b91905055505b7f00000000000000000000000000000000000000000000000000000000000000006009600454815481106111f6576111f5612115565b5b906000526020600020906004020160020154426112139190611ec3565b118015611252575060096004548154811061123157611230612115565b5b906000526020600020906004020160030160009054906101000a900460ff16155b8015611290575060096004548154811061126f5761126e612115565b5b906000526020600020906004020160030160019054906101000a900460ff16155b915081600760006101000a81548160ff021916908315150217905550816040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525091509150915091565b60035481565b6008818154811061130257600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600d6020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60065481565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611450576040517fa5baf15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561149b573d6000803e3d6000fd5b5060016005546114ab9190611ccb565b600581905550816000546114bf9190611ec3565b6000819055504260028190555060096040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600254815260200160001515815260200160001515815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690831515021790555050506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760016101000a81548160ff0219169083600181111561169b5761169a6120e6565b5b02179055506116b860405180602001604052806000815250611089565b50505050565b600760009054906101000a900460ff1681565b60045481565b6000806116e383611713565b90506000670de0b6b3a764000085836116fc9190611e69565b6117069190611d21565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561175c57600080fd5b505afa158015611770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117949190611a27565b5050509150506402540be400816117ab9190611d52565b915050919050565b60006117c66117c184611c7e565b611c59565b9050828152602081018484840111156117e2576117e1612182565b5b6117ed848285611fcc565b509392505050565b600081359050611804816121b6565b92915050565b600081359050611819816121cd565b92915050565b60008083601f84011261183557611834612178565b5b8235905067ffffffffffffffff81111561185257611851612173565b5b60208301915083600182028301111561186e5761186d61217d565b5b9250929050565b600082601f83011261188a57611889612178565b5b813561189a8482602086016117b3565b91505092915050565b6000815190506118b2816121e4565b92915050565b6000813590506118c7816121fb565b92915050565b6000815190506118dc816121fb565b92915050565b6000815190506118f181612212565b92915050565b60006020828403121561190d5761190c61218c565b5b600061191b848285016117f5565b91505092915050565b6000806040838503121561193b5761193a61218c565b5b60006119498582860161180a565b925050602061195a858286016118b8565b9150509250929050565b6000806020838503121561197b5761197a61218c565b5b600083013567ffffffffffffffff81111561199957611998612187565b5b6119a58582860161181f565b92509250509250929050565b6000602082840312156119c7576119c661218c565b5b600082013567ffffffffffffffff8111156119e5576119e4612187565b5b6119f184828501611875565b91505092915050565b600060208284031215611a1057611a0f61218c565b5b6000611a1e848285016118b8565b91505092915050565b600080600080600060a08688031215611a4357611a4261218c565b5b6000611a51888289016118e2565b9550506020611a62888289016118a3565b9450506040611a73888289016118cd565b9350506060611a84888289016118cd565b9250506080611a95888289016118e2565b9150509295509295909350565b611aab81611ef7565b82525050565b611aba81611f1b565b82525050565b6000611acb82611caf565b611ad58185611cba565b9350611ae5818560208601611fdb565b611aee81612191565b840191505092915050565b611b0281611f84565b82525050565b611b1181611f96565b82525050565b611b2081611f64565b82525050565b6000602082019050611b3b6000830184611aa2565b92915050565b6000604082019050611b566000830185611aa2565b611b636020830184611b17565b9392505050565b600060a082019050611b7f6000830188611aa2565b611b8c6020830187611b17565b611b996040830186611b17565b611ba66060830185611ab1565b611bb36080830184611ab1565b9695505050505050565b6000602082019050611bd26000830184611ab1565b92915050565b6000604082019050611bed6000830185611ab1565b8181036020830152611bff8184611ac0565b90509392505050565b6000602082019050611c1d6000830184611af9565b92915050565b6000602082019050611c386000830184611b08565b92915050565b6000602082019050611c536000830184611b17565b92915050565b6000611c63611c74565b9050611c6f828261200e565b919050565b6000604051905090565b600067ffffffffffffffff821115611c9957611c98612144565b5b611ca282612191565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000611cd682611f64565b9150611ce183611f64565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d1657611d15612088565b5b828201905092915050565b6000611d2c82611f64565b9150611d3783611f64565b925082611d4757611d466120b7565b5b828204905092915050565b6000611d5d82611f3a565b9150611d6883611f3a565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615611da757611da6612088565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611de457611de3612088565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615611e2157611e20612088565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615611e5e57611e5d612088565b5b828202905092915050565b6000611e7482611f64565b9150611e7f83611f64565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611eb857611eb7612088565b5b828202905092915050565b6000611ece82611f64565b9150611ed983611f64565b925082821015611eec57611eeb612088565b5b828203905092915050565b6000611f0282611f44565b9050919050565b6000611f1482611f44565b9050919050565b60008115159050919050565b6000819050611f35826121a2565b919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000611f8f82611fa8565b9050919050565b6000611fa182611f27565b9050919050565b6000611fb382611fba565b9050919050565b6000611fc582611f44565b9050919050565b82818337600083830152505050565b60005b83811015611ff9578082015181840152602081019050611fde565b83811115612008576000848401525b50505050565b61201782612191565b810181811067ffffffffffffffff8211171561203657612035612144565b5b80604052505050565b600061204a82611f64565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561207d5761207c612088565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b600281106121b3576121b26120e6565b5b50565b6121bf81611ef7565b81146121ca57600080fd5b50565b6121d681611f09565b81146121e157600080fd5b50565b6121ed81611f3a565b81146121f857600080fd5b50565b61220481611f64565b811461220f57600080fd5b50565b61221b81611f6e565b811461222657600080fd5b5056fea2646970667358221220fb7a06a13d5f5f57e87bdc5f0d7cb7ebdf4e55e23ca8adbd45cbe15204330fee64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 127,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "BankTotalMoney",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 129,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "contractOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 133,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 135,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "loanIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 138,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "i",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 141,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "loanCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 144,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "currentTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 146,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "up",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 173,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "status",
        "offset": 1,
        "slot": "7",
        "type": "t_enum(loan)170"
      },
      {
        "astId": 176,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "PriceFeed",
        "offset": 2,
        "slot": "7",
        "type": "t_contract(AggregatorV3Interface)84"
      },
      {
        "astId": 213,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "people",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Custmers)151_storage)dyn_storage"
      },
      {
        "astId": 217,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "peopleLoan",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(peopleLoanDetails)162_storage)dyn_storage"
      },
      {
        "astId": 221,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "blockedpeople",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(BlockedListPeople)167_storage)dyn_storage"
      },
      {
        "astId": 225,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "Balance",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 229,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "loanMapping",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 233,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "loanAmountMapping",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 237,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "blockedPeople",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(BlockedListPeople)167_storage)dyn_storage": {
        "base": "t_struct(BlockedListPeople)167_storage",
        "encoding": "dynamic_array",
        "label": "struct BankingAmount.BlockedListPeople[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Custmers)151_storage)dyn_storage": {
        "base": "t_struct(Custmers)151_storage",
        "encoding": "dynamic_array",
        "label": "struct BankingAmount.Custmers[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(peopleLoanDetails)162_storage)dyn_storage": {
        "base": "t_struct(peopleLoanDetails)162_storage",
        "encoding": "dynamic_array",
        "label": "struct BankingAmount.peopleLoanDetails[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)84": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_enum(loan)170": {
        "encoding": "inplace",
        "label": "enum BankingAmount.loan",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BlockedListPeople)167_storage": {
        "encoding": "inplace",
        "label": "struct BankingAmount.BlockedListPeople",
        "members": [
          {
            "astId": 164,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "blockedAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 166,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "remainingAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Custmers)151_storage": {
        "encoding": "inplace",
        "label": "struct BankingAmount.Custmers",
        "members": [
          {
            "astId": 148,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "CustmerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 150,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(peopleLoanDetails)162_storage": {
        "encoding": "inplace",
        "label": "struct BankingAmount.peopleLoanDetails",
        "members": [
          {
            "astId": 153,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "CustmerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 155,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "loanAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 157,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "timestampLoan",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 159,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "loanStatus",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 161,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "blockStatus",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}