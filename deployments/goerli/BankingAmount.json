{
  "address": "0x23cD13E66c51a06d3756E14d3aA9ea7915783134",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "PriceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Blocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotProvdingLoan",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "YouHavePayedLoan",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BankTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BankTotalMoney",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "RequestedLoanValue",
          "type": "uint256"
        }
      ],
      "name": "LOAN",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PayLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ViewAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blockedPeople",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockedpeople",
      "outputs": [
        {
          "internalType": "address",
          "name": "blockedAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loanAmountMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loanMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "people",
      "outputs": [
        {
          "internalType": "address",
          "name": "CustmerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "peopleLoan",
      "outputs": [
        {
          "internalType": "address",
          "name": "CustmerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "loanStatus",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to_receiever",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "send_from_BankAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum BankingAmount.loan",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withDraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x862038958fe5fa13d8e433dcf225b0cda84cb7d2c8cccc5e406a55fc5cde4968",
  "receipt": {
    "to": null,
    "from": "0x0a0179860323B23d990E71f7ee006238D8720179",
    "contractAddress": "0x23cD13E66c51a06d3756E14d3aA9ea7915783134",
    "transactionIndex": 18,
    "gasUsed": "1804102",
    "logsBloom": "0x
    "blockHash": "0x4109aebb11397248633d5842bfd5644df235a217a7b28bad68beed6c2d98e3d2",
    "transactionHash": "0x862038958fe5fa13d8e433dcf225b0cda84cb7d2c8cccc5e406a55fc5cde4968",
    "logs": [],
    "blockNumber": 8466472,
    "cumulativeGasUsed": "8857427",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e",
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "63477d204585893f503fd7792962ff17",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"PriceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Blocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProvdingLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YouHavePayedLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BankTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BankTotalMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"RequestedLoanValue\",\"type\":\"uint256\"}],\"name\":\"LOAN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PayLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ViewAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockedPeople\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockedpeople\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"blockedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanAmountMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"people\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"CustmerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"peopleLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"CustmerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"loanStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to_receiever\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"send_from_BankAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum BankingAmount.loan\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BankingTranscation.sol\":\"BankingAmount\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"contracts/BankingTranscation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSED\\npragma solidity ^0.8.8;\\n\\n/* This contract is about sending your ETH to the BANK(contract) and retieve when you need or \\n   you can send to someone\\n   function:\\n   payment\\n   withdraw\\n   send_to\\n   View_deposited amount\\n   loan:\\n*/\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n\\nerror NoBalance();\\nerror InsufficientBalance();\\nerror  NotProvdingLoan();\\nerror  YouHavePayedLoan();\\nerror Blocked();\\n\\ncontract BankingAmount is AutomationCompatibleInterface {\\n    using PriceConverter for uint256;\\n    address private immutable i_OwnerAddress;\\n    uint256 public BankTotalMoney;\\n    address public contractOwner;\\n    uint256 public immutable i_interval;\\n    uint256 public lastTimeStamp;\\n    \\n    struct Custmers {\\n        address CustmerAddress;\\n        uint256 amount;\\n    }\\n    \\n    struct peopleLoanDetails{\\n        address CustmerAddress;\\n        uint256 loanAmount;\\n        bool loanStatus;\\n    }\\n    struct BlockedListPeople {\\n        address blockedAddress;\\n        uint256 remainingAmount;\\n    }\\n    enum loan {ON,OFF}\\n    \\n    loan public status;\\n    AggregatorV3Interface public PriceFeed;\\n    \\n    constructor(address PriceFeedAddress,uint256 interval) {\\n        contractOwner = msg.sender;\\n        PriceFeed = AggregatorV3Interface(PriceFeedAddress);\\n        i_interval=interval;\\n        status=loan.OFF;\\n        i_OwnerAddress=msg.sender;\\n    }\\n\\n    Custmers[] public people;\\n    peopleLoanDetails[] public peopleLoan;\\n    BlockedListPeople[] public blockedpeople;\\n\\n    mapping(address => uint256) public Balance;\\n    mapping(address => bool) public loanMapping;\\n    mapping(address => uint256) public loanAmountMapping;\\n    mapping(address => uint256) public blockedPeople;\\n\\n\\n    function payment() public payable {\\n        people.push(\\n            Custmers(msg.sender, msg.value.getConversionRate(PriceFeed))\\n        );\\n        Balance[msg.sender] =\\n            Balance[msg.sender] +\\n            msg.value.getConversionRate(PriceFeed);\\n        BankTotalMoney = Balance[msg.sender];\\n    }\\n\\n    function ViewAmount() public view returns (uint256) {\\n        return Balance[msg.sender];\\n    }\\n    function BankTotalAmount() public view returns(uint256){\\n        return address(this).balance;\\n    }\\n\\n    function send_from_BankAccount(address payable to_receiever,uint256 value) public {\\n        address from_user = msg.sender;\\n        // (bool sent, ) = payable(to_receiever).call{\\n        //     value: msg.value\\n        // }(\\\"\\\");\\n        // require(sent, \\\"Failed to send Ether\\\");\\n        to_receiever.transfer(value);\\n        // Balance[to_receiever] = Balance[to_receiever] + Balance[from_user];\\n        Balance[from_user] = Balance[from_user] - value;\\n    }\\n\\n    function withDraw(uint256 value) public {\\n        address withdraw = msg.sender;\\n        if (Balance[withdraw] == 0) revert NoBalance();\\n        if(blockedPeople[msg.sender]!=0) revert Blocked();\\n        // (bool sent, ) = payable(withdraw).call{value: msg.value}(\\\"\\\");\\n        // require(sent, \\\"Failed to withdraw Ether\\\");\\n        payable(withdraw).transfer(value);\\n        Balance[withdraw] = Balance[withdraw] - value;\\n    }\\n\\n    function LOAN(uint256 RequestedLoanValue) public {\\n        // if (BankTotalMoney > RequestedLoanValue.getConversionRate(PriceFeed))\\n        //     revert InsufficientBalance();\\n        if(blockedPeople[msg.sender]!=0) revert Blocked();\\n        address withdraw = msg.sender;\\n        payable(withdraw).transfer(RequestedLoanValue);\\n        BankTotalMoney = BankTotalMoney - RequestedLoanValue;\\n        peopleLoan.push(peopleLoanDetails(msg.sender,RequestedLoanValue,false));\\n        loanMapping[msg.sender]=false;\\n        loanAmountMapping[msg.sender]=RequestedLoanValue;\\n        lastTimeStamp=block.timestamp;\\n        status=loan.ON;\\n        checkUpkeep(\\\"\\\");\\n    }\\n\\n    function PayLoan() public payable{\\n        if(loanMapping[msg.sender]!=false) revert YouHavePayedLoan();  \\n        payable(i_OwnerAddress).transfer(loanAmountMapping[msg.sender]);\\n        loanMapping[msg.sender]=true;\\n        peopleLoan[peopleLoan.length-1].loanStatus=true;\\n        }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    ) public override returns (bool upkeepNeeded, bytes memory /*performData*/) {\\n        if(status == loan.OFF) revert NotProvdingLoan();\\n        upkeepNeeded = (((block.timestamp - lastTimeStamp) > i_interval) && !peopleLoan[peopleLoan.length-1].loanStatus);\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        //  (((block.timestamp - lastTimeStamp) > i_interval) && !peopleLoan[peopleLoan.length-1].loanStatus);\\n        blockedpeople.push(BlockedListPeople(\\n            peopleLoan[peopleLoan.length-1].CustmerAddress,\\n            peopleLoan[peopleLoan.length-1].loanAmount)\\n        );\\n        blockedPeople[peopleLoan[peopleLoan.length-1].CustmerAddress]=peopleLoan[peopleLoan.length-1].loanAmount;\\n        // if(Balance[peopleLoan[peopleLoan.length-1].CustmerAddress]!=0){\\n            \\n        // }\\n    }\\n}\",\"keccak256\":\"0xb64503bdaaacbdbe3c1e315cd5293fea834090815ac205bd787d5ec7d48eb1f6\",\"license\":\"MIT LICENSED\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter{\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x677e22129c2af493682387ba62cf9e3ba20b643c96a1b312a4a3e5b82f5a52cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002147380380620021478339818101604052810190620000379190620001d3565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060a081815250506001600360006101000a81548160ff02191690836001811115620000ea57620000e96200021a565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505062000249565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b60008060408385031215620001ed57620001ec6200012e565b5b6000620001fd8582860162000181565b92505060206200021085828601620001bc565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a051611ece6200027960003960008181610f020152610f9f01526000610dad0152611ece6000f3fe6080604052600436106101355760003560e01c80634d535a80116100ab5780636e04ff0d1161006f5780636e04ff0d146103ff5780639e7a13ad1461043d578063b8a84c521461047b578063ce606ee0146104b8578063d1e659af146104e3578063d478dfdb1461050e57610135565b80634d535a80146103375780635a815fc314610374578063686b38d51461037e5780636919207d146103a95780636be98763146103d457610135565b8063200d2ed2116100fd578063200d2ed214610234578063239fcf0f1461025f5780633f3b3b271461029c57806342f6487a146102c75780634585e33b146102d15780634be19f9f146102fa57610135565b806301388b661461013a57806308a4c1fa1461017857806308b7fa31146101b757806314174f33146101e257806315b309061461020b575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c91906114b7565b610537565b60405161016f929190611534565b60405180910390f35b34801561018457600080fd5b5061019f600480360381019061019a91906114b7565b61058b565b6040516101ae93929190611578565b60405180910390f35b3480156101c357600080fd5b506101cc6105f2565b6040516101d9919061160e565b60405180910390f35b3480156101ee57600080fd5b50610209600480360381019061020491906114b7565b610618565b005b34801561021757600080fd5b50610232600480360381019061022d9190611667565b6107e9565b005b34801561024057600080fd5b506102496108c8565b604051610256919061171e565b60405180910390f35b34801561026b57600080fd5b5061028660048036038101906102819190611765565b6108db565b6040516102939190611792565b60405180910390f35b3480156102a857600080fd5b506102b16108f3565b6040516102be9190611792565b60405180910390f35b6102cf6108f9565b005b3480156102dd57600080fd5b506102f860048036038101906102f39190611812565b610ae0565b005b34801561030657600080fd5b50610321600480360381019061031c9190611765565b610ce9565b60405161032e9190611792565b60405180910390f35b34801561034357600080fd5b5061035e60048036038101906103599190611765565b610d01565b60405161036b919061185f565b60405180910390f35b61037c610d21565b005b34801561038a57600080fd5b50610393610efa565b6040516103a09190611792565b60405180910390f35b3480156103b557600080fd5b506103be610f00565b6040516103cb9190611792565b60405180910390f35b3480156103e057600080fd5b506103e9610f24565b6040516103f69190611792565b60405180910390f35b34801561040b57600080fd5b50610426600480360381019061042191906119bb565b610f2c565b604051610434929190611a8c565b60405180910390f35b34801561044957600080fd5b50610464600480360381019061045f91906114b7565b611021565b604051610472929190611534565b60405180910390f35b34801561048757600080fd5b506104a2600480360381019061049d9190611765565b611075565b6040516104af9190611792565b60405180910390f35b3480156104c457600080fd5b506104cd61108d565b6040516104da9190611abc565b60405180910390f35b3480156104ef57600080fd5b506104f86110b3565b6040516105059190611792565b60405180910390f35b34801561051a57600080fd5b50610535600480360381019061053091906114b7565b6110fa565b005b6006818154811061054757600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b6005818154811061059b57600080fd5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905083565b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003390506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610697576040517fc2caa2a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610710576040517fa5baf15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610756573d6000803e3d6000fd5b5081600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107a29190611b06565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60003390508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610834573d6000803e3d6000fd5b5081600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108809190611b06565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600360009054906101000a900460ff1681565b60076020528060005260406000206000915090505481565b60025481565b600460405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001610957600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461139190919063ffffffff16565b815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050610a0b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461139190919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a559190611b3a565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600081905550565b6006604051806040016040528060056001600580549050610b019190611b06565b81548110610b1257610b11611b90565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160056001600580549050610b739190611b06565b81548110610b8457610b83611b90565b5b906000526020600020906003020160010154815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505060056001600580549050610c299190611b06565b81548110610c3a57610c39611b90565b5b906000526020600020906003020160010154600a600060056001600580549050610c649190611b06565b81548110610c7557610c74611b90565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600a6020528060005260406000206000915090505481565b60086020528060005260406000206000915054906101000a900460ff1681565b60001515600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610dab576040517f833346fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610e50573d6000803e3d6000fd5b506001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056001600580549050610ebf9190611b06565b81548110610ed057610ecf611b90565b5b906000526020600020906003020160020160006101000a81548160ff021916908315150217905550565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600047905090565b60006060600180811115610f4357610f426116a7565b5b600360009054906101000a900460ff166001811115610f6557610f646116a7565b5b1415610f9d576040517f745c5ddd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060025442610fcc9190611b06565b11801561101a575060056001600580549050610fe89190611b06565b81548110610ff957610ff8611b90565b5b906000526020600020906003020160020160009054906101000a900460ff16155b9150915091565b6004818154811061103157600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60096020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611173576040517fa5baf15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156111be573d6000803e3d6000fd5b50816000546111cd9190611b06565b600081905550600560405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160001515815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555050506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550426002819055506000600360006101000a81548160ff0219169083600181111561136e5761136d6116a7565b5b021790555061138b60405180602001604052806000815250610f2c565b50505050565b60008061139d836113cd565b90506000670de0b6b3a764000085836113b69190611bbf565b6113c09190611c48565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561141657600080fd5b505afa15801561142a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144e9190611d06565b5050509150506402540be400816114659190611d81565b915050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61149481611481565b811461149f57600080fd5b50565b6000813590506114b18161148b565b92915050565b6000602082840312156114cd576114cc611477565b5b60006114db848285016114a2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061150f826114e4565b9050919050565b61151f81611504565b82525050565b61152e81611481565b82525050565b60006040820190506115496000830185611516565b6115566020830184611525565b9392505050565b60008115159050919050565b6115728161155d565b82525050565b600060608201905061158d6000830186611516565b61159a6020830185611525565b6115a76040830184611569565b949350505050565b6000819050919050565b60006115d46115cf6115ca846114e4565b6115af565b6114e4565b9050919050565b60006115e6826115b9565b9050919050565b60006115f8826115db565b9050919050565b611608816115ed565b82525050565b600060208201905061162360008301846115ff565b92915050565b6000611634826114e4565b9050919050565b61164481611629565b811461164f57600080fd5b50565b6000813590506116618161163b565b92915050565b6000806040838503121561167e5761167d611477565b5b600061168c85828601611652565b925050602061169d858286016114a2565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106116e7576116e66116a7565b5b50565b60008190506116f8826116d6565b919050565b6000611708826116ea565b9050919050565b611718816116fd565b82525050565b6000602082019050611733600083018461170f565b92915050565b61174281611504565b811461174d57600080fd5b50565b60008135905061175f81611739565b92915050565b60006020828403121561177b5761177a611477565b5b600061178984828501611750565b91505092915050565b60006020820190506117a76000830184611525565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126117d2576117d16117ad565b5b8235905067ffffffffffffffff8111156117ef576117ee6117b2565b5b60208301915083600182028301111561180b5761180a6117b7565b5b9250929050565b6000806020838503121561182957611828611477565b5b600083013567ffffffffffffffff8111156118475761184661147c565b5b611853858286016117bc565b92509250509250929050565b60006020820190506118746000830184611569565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118c88261187f565b810181811067ffffffffffffffff821117156118e7576118e6611890565b5b80604052505050565b60006118fa61146d565b905061190682826118bf565b919050565b600067ffffffffffffffff82111561192657611925611890565b5b61192f8261187f565b9050602081019050919050565b82818337600083830152505050565b600061195e6119598461190b565b6118f0565b90508281526020810184848401111561197a5761197961187a565b5b61198584828561193c565b509392505050565b600082601f8301126119a2576119a16117ad565b5b81356119b284826020860161194b565b91505092915050565b6000602082840312156119d1576119d0611477565b5b600082013567ffffffffffffffff8111156119ef576119ee61147c565b5b6119fb8482850161198d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a3e578082015181840152602081019050611a23565b83811115611a4d576000848401525b50505050565b6000611a5e82611a04565b611a688185611a0f565b9350611a78818560208601611a20565b611a818161187f565b840191505092915050565b6000604082019050611aa16000830185611569565b8181036020830152611ab38184611a53565b90509392505050565b6000602082019050611ad16000830184611516565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b1182611481565b9150611b1c83611481565b925082821015611b2f57611b2e611ad7565b5b828203905092915050565b6000611b4582611481565b9150611b5083611481565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611b8557611b84611ad7565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611bca82611481565b9150611bd583611481565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c0e57611c0d611ad7565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611c5382611481565b9150611c5e83611481565b925082611c6e57611c6d611c19565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b611c9881611c79565b8114611ca357600080fd5b50565b600081519050611cb581611c8f565b92915050565b6000819050919050565b611cce81611cbb565b8114611cd957600080fd5b50565b600081519050611ceb81611cc5565b92915050565b600081519050611d008161148b565b92915050565b600080600080600060a08688031215611d2257611d21611477565b5b6000611d3088828901611ca6565b9550506020611d4188828901611cdc565b9450506040611d5288828901611cf1565b9350506060611d6388828901611cf1565b9250506080611d7488828901611ca6565b9150509295509295909350565b6000611d8c82611cbb565b9150611d9783611cbb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615611dd657611dd5611ad7565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611e1357611e12611ad7565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615611e5057611e4f611ad7565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615611e8d57611e8c611ad7565b5b82820290509291505056fea2646970667358221220b45dca0cd328d731370e52c2d09d51f248969197dd91a6b54a9fa461b32baf3e64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c80634d535a80116100ab5780636e04ff0d1161006f5780636e04ff0d146103ff5780639e7a13ad1461043d578063b8a84c521461047b578063ce606ee0146104b8578063d1e659af146104e3578063d478dfdb1461050e57610135565b80634d535a80146103375780635a815fc314610374578063686b38d51461037e5780636919207d146103a95780636be98763146103d457610135565b8063200d2ed2116100fd578063200d2ed214610234578063239fcf0f1461025f5780633f3b3b271461029c57806342f6487a146102c75780634585e33b146102d15780634be19f9f146102fa57610135565b806301388b661461013a57806308a4c1fa1461017857806308b7fa31146101b757806314174f33146101e257806315b309061461020b575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c91906114b7565b610537565b60405161016f929190611534565b60405180910390f35b34801561018457600080fd5b5061019f600480360381019061019a91906114b7565b61058b565b6040516101ae93929190611578565b60405180910390f35b3480156101c357600080fd5b506101cc6105f2565b6040516101d9919061160e565b60405180910390f35b3480156101ee57600080fd5b50610209600480360381019061020491906114b7565b610618565b005b34801561021757600080fd5b50610232600480360381019061022d9190611667565b6107e9565b005b34801561024057600080fd5b506102496108c8565b604051610256919061171e565b60405180910390f35b34801561026b57600080fd5b5061028660048036038101906102819190611765565b6108db565b6040516102939190611792565b60405180910390f35b3480156102a857600080fd5b506102b16108f3565b6040516102be9190611792565b60405180910390f35b6102cf6108f9565b005b3480156102dd57600080fd5b506102f860048036038101906102f39190611812565b610ae0565b005b34801561030657600080fd5b50610321600480360381019061031c9190611765565b610ce9565b60405161032e9190611792565b60405180910390f35b34801561034357600080fd5b5061035e60048036038101906103599190611765565b610d01565b60405161036b919061185f565b60405180910390f35b61037c610d21565b005b34801561038a57600080fd5b50610393610efa565b6040516103a09190611792565b60405180910390f35b3480156103b557600080fd5b506103be610f00565b6040516103cb9190611792565b60405180910390f35b3480156103e057600080fd5b506103e9610f24565b6040516103f69190611792565b60405180910390f35b34801561040b57600080fd5b50610426600480360381019061042191906119bb565b610f2c565b604051610434929190611a8c565b60405180910390f35b34801561044957600080fd5b50610464600480360381019061045f91906114b7565b611021565b604051610472929190611534565b60405180910390f35b34801561048757600080fd5b506104a2600480360381019061049d9190611765565b611075565b6040516104af9190611792565b60405180910390f35b3480156104c457600080fd5b506104cd61108d565b6040516104da9190611abc565b60405180910390f35b3480156104ef57600080fd5b506104f86110b3565b6040516105059190611792565b60405180910390f35b34801561051a57600080fd5b50610535600480360381019061053091906114b7565b6110fa565b005b6006818154811061054757600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b6005818154811061059b57600080fd5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905083565b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003390506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610697576040517fc2caa2a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610710576040517fa5baf15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610756573d6000803e3d6000fd5b5081600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107a29190611b06565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60003390508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610834573d6000803e3d6000fd5b5081600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108809190611b06565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600360009054906101000a900460ff1681565b60076020528060005260406000206000915090505481565b60025481565b600460405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001610957600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461139190919063ffffffff16565b815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050610a0b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461139190919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a559190611b3a565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600081905550565b6006604051806040016040528060056001600580549050610b019190611b06565b81548110610b1257610b11611b90565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160056001600580549050610b739190611b06565b81548110610b8457610b83611b90565b5b906000526020600020906003020160010154815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505060056001600580549050610c299190611b06565b81548110610c3a57610c39611b90565b5b906000526020600020906003020160010154600a600060056001600580549050610c649190611b06565b81548110610c7557610c74611b90565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600a6020528060005260406000206000915090505481565b60086020528060005260406000206000915054906101000a900460ff1681565b60001515600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610dab576040517f833346fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610e50573d6000803e3d6000fd5b506001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056001600580549050610ebf9190611b06565b81548110610ed057610ecf611b90565b5b906000526020600020906003020160020160006101000a81548160ff021916908315150217905550565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600047905090565b60006060600180811115610f4357610f426116a7565b5b600360009054906101000a900460ff166001811115610f6557610f646116a7565b5b1415610f9d576040517f745c5ddd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060025442610fcc9190611b06565b11801561101a575060056001600580549050610fe89190611b06565b81548110610ff957610ff8611b90565b5b906000526020600020906003020160020160009054906101000a900460ff16155b9150915091565b6004818154811061103157600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60096020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611173576040517fa5baf15100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156111be573d6000803e3d6000fd5b50816000546111cd9190611b06565b600081905550600560405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160001515815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555050506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550426002819055506000600360006101000a81548160ff0219169083600181111561136e5761136d6116a7565b5b021790555061138b60405180602001604052806000815250610f2c565b50505050565b60008061139d836113cd565b90506000670de0b6b3a764000085836113b69190611bbf565b6113c09190611c48565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561141657600080fd5b505afa15801561142a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144e9190611d06565b5050509150506402540be400816114659190611d81565b915050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61149481611481565b811461149f57600080fd5b50565b6000813590506114b18161148b565b92915050565b6000602082840312156114cd576114cc611477565b5b60006114db848285016114a2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061150f826114e4565b9050919050565b61151f81611504565b82525050565b61152e81611481565b82525050565b60006040820190506115496000830185611516565b6115566020830184611525565b9392505050565b60008115159050919050565b6115728161155d565b82525050565b600060608201905061158d6000830186611516565b61159a6020830185611525565b6115a76040830184611569565b949350505050565b6000819050919050565b60006115d46115cf6115ca846114e4565b6115af565b6114e4565b9050919050565b60006115e6826115b9565b9050919050565b60006115f8826115db565b9050919050565b611608816115ed565b82525050565b600060208201905061162360008301846115ff565b92915050565b6000611634826114e4565b9050919050565b61164481611629565b811461164f57600080fd5b50565b6000813590506116618161163b565b92915050565b6000806040838503121561167e5761167d611477565b5b600061168c85828601611652565b925050602061169d858286016114a2565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106116e7576116e66116a7565b5b50565b60008190506116f8826116d6565b919050565b6000611708826116ea565b9050919050565b611718816116fd565b82525050565b6000602082019050611733600083018461170f565b92915050565b61174281611504565b811461174d57600080fd5b50565b60008135905061175f81611739565b92915050565b60006020828403121561177b5761177a611477565b5b600061178984828501611750565b91505092915050565b60006020820190506117a76000830184611525565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126117d2576117d16117ad565b5b8235905067ffffffffffffffff8111156117ef576117ee6117b2565b5b60208301915083600182028301111561180b5761180a6117b7565b5b9250929050565b6000806020838503121561182957611828611477565b5b600083013567ffffffffffffffff8111156118475761184661147c565b5b611853858286016117bc565b92509250509250929050565b60006020820190506118746000830184611569565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118c88261187f565b810181811067ffffffffffffffff821117156118e7576118e6611890565b5b80604052505050565b60006118fa61146d565b905061190682826118bf565b919050565b600067ffffffffffffffff82111561192657611925611890565b5b61192f8261187f565b9050602081019050919050565b82818337600083830152505050565b600061195e6119598461190b565b6118f0565b90508281526020810184848401111561197a5761197961187a565b5b61198584828561193c565b509392505050565b600082601f8301126119a2576119a16117ad565b5b81356119b284826020860161194b565b91505092915050565b6000602082840312156119d1576119d0611477565b5b600082013567ffffffffffffffff8111156119ef576119ee61147c565b5b6119fb8482850161198d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a3e578082015181840152602081019050611a23565b83811115611a4d576000848401525b50505050565b6000611a5e82611a04565b611a688185611a0f565b9350611a78818560208601611a20565b611a818161187f565b840191505092915050565b6000604082019050611aa16000830185611569565b8181036020830152611ab38184611a53565b90509392505050565b6000602082019050611ad16000830184611516565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b1182611481565b9150611b1c83611481565b925082821015611b2f57611b2e611ad7565b5b828203905092915050565b6000611b4582611481565b9150611b5083611481565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611b8557611b84611ad7565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611bca82611481565b9150611bd583611481565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c0e57611c0d611ad7565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611c5382611481565b9150611c5e83611481565b925082611c6e57611c6d611c19565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b611c9881611c79565b8114611ca357600080fd5b50565b600081519050611cb581611c8f565b92915050565b6000819050919050565b611cce81611cbb565b8114611cd957600080fd5b50565b600081519050611ceb81611cc5565b92915050565b600081519050611d008161148b565b92915050565b600080600080600060a08688031215611d2257611d21611477565b5b6000611d3088828901611ca6565b9550506020611d4188828901611cdc565b9450506040611d5288828901611cf1565b9350506060611d6388828901611cf1565b9250506080611d7488828901611ca6565b9150509295509295909350565b6000611d8c82611cbb565b9150611d9783611cbb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615611dd657611dd5611ad7565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611e1357611e12611ad7565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615611e5057611e4f611ad7565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615611e8d57611e8c611ad7565b5b82820290509291505056fea2646970667358221220b45dca0cd328d731370e52c2d09d51f248969197dd91a6b54a9fa461b32baf3e64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 127,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "BankTotalMoney",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 129,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "contractOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 133,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 156,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "status",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(loan)153"
      },
      {
        "astId": 159,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "PriceFeed",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)84"
      },
      {
        "astId": 196,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "people",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Custmers)138_storage)dyn_storage"
      },
      {
        "astId": 200,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "peopleLoan",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(peopleLoanDetails)145_storage)dyn_storage"
      },
      {
        "astId": 204,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "blockedpeople",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(BlockedListPeople)150_storage)dyn_storage"
      },
      {
        "astId": 208,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "Balance",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 212,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "loanMapping",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 216,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "loanAmountMapping",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 220,
        "contract": "contracts/BankingTranscation.sol:BankingAmount",
        "label": "blockedPeople",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(BlockedListPeople)150_storage)dyn_storage": {
        "base": "t_struct(BlockedListPeople)150_storage",
        "encoding": "dynamic_array",
        "label": "struct BankingAmount.BlockedListPeople[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Custmers)138_storage)dyn_storage": {
        "base": "t_struct(Custmers)138_storage",
        "encoding": "dynamic_array",
        "label": "struct BankingAmount.Custmers[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(peopleLoanDetails)145_storage)dyn_storage": {
        "base": "t_struct(peopleLoanDetails)145_storage",
        "encoding": "dynamic_array",
        "label": "struct BankingAmount.peopleLoanDetails[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)84": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_enum(loan)153": {
        "encoding": "inplace",
        "label": "enum BankingAmount.loan",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BlockedListPeople)150_storage": {
        "encoding": "inplace",
        "label": "struct BankingAmount.BlockedListPeople",
        "members": [
          {
            "astId": 147,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "blockedAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 149,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "remainingAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Custmers)138_storage": {
        "encoding": "inplace",
        "label": "struct BankingAmount.Custmers",
        "members": [
          {
            "astId": 135,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "CustmerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 137,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(peopleLoanDetails)145_storage": {
        "encoding": "inplace",
        "label": "struct BankingAmount.peopleLoanDetails",
        "members": [
          {
            "astId": 140,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "CustmerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 142,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "loanAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 144,
            "contract": "contracts/BankingTranscation.sol:BankingAmount",
            "label": "loanStatus",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}