{
  "language": "Solidity",
  "sources": {
    "contracts/BankingTranscation.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSED\npragma solidity ^0.8.8;\n\n/* This contract is about sending your ETH to the BANK(contract) and retieve when you need or \n   you can send to someone\n   function:\n   payment\n   withdraw\n   send_to\n   View_deposited amount\n*/\ncontract BankingAmount{\n    address public contractOwner;\n    struct Custmers{\n        address CustmerAddress;\n        uint256 amount;\n    }\n    constructor(){\n       contractOwner= msg.sender;\n    }\n    Custmers[] public people;\n    mapping(address => uint256) public Balance;\n\n    function payment() public payable{\n        people.push(Custmers(msg.sender,msg.value));\n        Balance[msg.sender]= Balance[msg.sender]+ msg.value;\n    }\n    function ViewAmount(address USER_ADDRESS) public view returns(uint256){\n        return Balance[USER_ADDRESS];\n    }\n    function send_to(address payable to_receiever) public payable{\n        address from_user=msg.sender;\n        (bool sent,) = to_receiever.call{value: Balance[from_user]}(\"\");\n        require(sent, \"Failed to send Ether\");\n        Balance[to_receiever]=Balance[to_receiever]+Balance[from_user];\n        Balance[from_user]=0;\n    }\n    function withDraw() public payable{\n        address withdraw=msg.sender;\n        (bool sent,)=withdraw.call{value:Balance[withdraw]}(\"\");\n        require(sent, \"Failed to withdraw Ether\");\n        Balance[withdraw]=0;\n    }\n    \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}