{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/BankingTranscation.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSED\npragma solidity ^0.8.8;\n\n/* This contract is about sending your ETH to the BANK(contract) and retieve when you need or \n   you can send to someone\n   function:\n   payment\n   withdraw\n   send_to\n   View_deposited amount\n   loan:\n*/\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\";\nimport \"./PriceConverter.sol\";\n\n\nerror NoBalance();\nerror InsufficientBalance();\nerror  NotProvdingLoan();\nerror  YouHavePayedLoan();\nerror Blocked();\n\ncontract BankingAmount is AutomationCompatibleInterface {\n    using PriceConverter for uint256;\n    address private immutable i_OwnerAddress;\n    uint256 public BankTotalMoney;\n    address public contractOwner;\n    uint256 public immutable i_interval;\n    uint256 public lastTimeStamp;\n    uint256 public loanIndex;\n    \n    struct Custmers {\n        address CustmerAddress;\n        uint256 amount;\n    }\n    \n    struct peopleLoanDetails{\n        address CustmerAddress;\n        uint256 loanAmount;\n        uint256 timestampLoan;\n        bool loanStatus;\n        bool blockStatus;  //true==blocked false ==not blocked\n    }\n    struct BlockedListPeople {\n        address blockedAddress;\n        uint256 remainingAmount;\n    }\n    enum loan {ON,OFF}\n    \n    loan public status;\n    AggregatorV3Interface public PriceFeed;\n    \n    constructor(address PriceFeedAddress,uint256 interval) {\n        contractOwner = msg.sender;\n        PriceFeed = AggregatorV3Interface(PriceFeedAddress);\n        i_interval=interval;\n        status=loan.OFF;\n        i_OwnerAddress=msg.sender;\n    }\n\n    Custmers[] public people;\n    peopleLoanDetails[] public peopleLoan;\n    BlockedListPeople[] public blockedpeople;\n\n    mapping(address => uint256) public Balance;\n    mapping(address => bool) public loanMapping;\n    mapping(address => uint256) public loanAmountMapping;\n    mapping(address => uint256) public blockedPeople;\n\n\n    function payment() public payable {\n        people.push(\n            Custmers(msg.sender, msg.value.getConversionRate(PriceFeed))\n        );\n        Balance[msg.sender] =\n            Balance[msg.sender] +\n            msg.value.getConversionRate(PriceFeed);\n        BankTotalMoney = Balance[msg.sender];\n    }\n\n    function ViewAmount() public view returns (uint256) {\n        return Balance[msg.sender];\n    }\n    function BankTotalAmount() public view returns(uint256){\n        return address(this).balance;\n    }\n\n    function send_from_BankAccount(address payable to_receiever,uint256 value) public {\n        address from_user = msg.sender;\n        // (bool sent, ) = payable(to_receiever).call{\n        //     value: msg.value\n        // }(\"\");\n        // require(sent, \"Failed to send Ether\");\n        to_receiever.transfer(value);\n        // Balance[to_receiever] = Balance[to_receiever] + Balance[from_user];\n        Balance[from_user] = Balance[from_user] - value;\n    }\n\n    function withDraw(uint256 value) public {\n        address withdraw = msg.sender;\n        if (Balance[withdraw] == 0) revert NoBalance();\n        if(blockedPeople[msg.sender]!=0) revert Blocked();\n        // (bool sent, ) = payable(withdraw).call{value: msg.value}(\"\");\n        // require(sent, \"Failed to withdraw Ether\");\n        payable(withdraw).transfer(value);\n        Balance[withdraw] = Balance[withdraw] - value;\n    }\n\n    function LOAN(uint256 RequestedLoanValue) public {\n        // if (BankTotalMoney > RequestedLoanValue.getConversionRate(PriceFeed))\n        //     revert InsufficientBalance();\n        // if(address(this).balance<)\n        if(blockedPeople[msg.sender]!=0) revert Blocked();\n        address withdraw = msg.sender;\n        payable(withdraw).transfer(RequestedLoanValue);\n        BankTotalMoney = BankTotalMoney - RequestedLoanValue;\n        lastTimeStamp=block.timestamp;\n        peopleLoan.push(peopleLoanDetails(msg.sender,RequestedLoanValue,lastTimeStamp,false,false));\n        loanMapping[msg.sender]=false;\n        loanAmountMapping[msg.sender]=RequestedLoanValue;\n        status=loan.ON;\n        checkUpkeep(\"\");\n    }\n\n    function PayLoan() public payable{\n        if(loanMapping[msg.sender]!=false) revert YouHavePayedLoan();  \n        payable(i_OwnerAddress).transfer(loanAmountMapping[msg.sender]);\n        loanMapping[msg.sender]=true;\n        peopleLoan[peopleLoan.length-1].loanStatus=true;\n        }\n\n    function checkUpkeep(\n        bytes memory /*checkData*/\n    ) public override returns (bool upkeepNeeded, bytes memory /*performData*/) {\n        if(status == loan.OFF) revert NotProvdingLoan();\n        for(uint256 i=0;i<=peopleLoan.length-1;i++){\n            loanIndex=i;\n            upkeepNeeded = (\n                ((block.timestamp - peopleLoan[i].timestampLoan) > i_interval)\n                && !peopleLoan[i].loanStatus \n                && !peopleLoan[i].blockStatus\n                );\n          \n        }\n    }\n\n    function performUpkeep(bytes calldata performData) external override {\n        //  (((block.timestamp - lastTimeStamp) > i_interval) && !peopleLoan[peopleLoan.length-1].loanStatus);\n        blockedpeople.push(BlockedListPeople(\n            peopleLoan[loanIndex].CustmerAddress,\n            peopleLoan[loanIndex].loanAmount)\n        );\n        peopleLoan[loanIndex].blockStatus=true;\n        blockedPeople[peopleLoan[loanIndex].CustmerAddress]=peopleLoan[loanIndex].loanAmount;\n        status=loan.OFF;\n        // if(Balance[peopleLoan[peopleLoan.length-1].CustmerAddress]!=0){\n            \n        // }\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter{\n  function getPrice(AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\n    // ETH/USD rate in 18 digit\n    return uint256(answer * 10000000000);\n  }\n\n  // 1000000000\n  // call it get fiatConversionRate, since it assumes something about decimals\n  // It wouldn't work for every aggregator\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\n    return ethAmountInUsd;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}